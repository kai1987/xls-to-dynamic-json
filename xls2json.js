// Generated by CoffeeScript 1.6.3
(function() {
  var CACHE, TYPE_INT, TYPE_ONE_TO_MANY, VALIDATION_KEY, VALIDATION_UNIQUE, convertJson, fs, make_dynamic_json, readOneToMany, xls, xlsx,
    __indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

  xls = require("xlsjs");

  fs = require("fs");

  xlsx = require("xlsx");

  VALIDATION_KEY = "key";

  VALIDATION_UNIQUE = "unique";

  TYPE_INT = "int";

  TYPE_ONE_TO_MANY = "oneToMany";

  convertJson = function(fileName, sheetName) {
    var fileArr, forginerKeyName, k, key, meta_data, newJson, nouse, obj, rawJson, read, sheet, v, validation, validationTemp, workbook, _i, _len, _ref, _ref1;
    fileArr = fileName.split(".");
    if (fileArr[fileArr.length - 1] === 'xlsx') {
      read = xlsx;
    } else {
      read = xls;
    }
    workbook = read.readFile(fileName);
    sheet = workbook.Sheets[sheetName];
    rawJson = read.utils.make_json(sheet);
    if (!rawJson) {
      return;
    }
    meta_data = rawJson[1];
    validation = rawJson[2];
    rawJson.splice(0, 3);
    validationTemp = {};
    newJson = {};
    for (_i = 0, _len = rawJson.length; _i < _len; _i++) {
      obj = rawJson[_i];
      key = 0;
      for (k in validation) {
        v = validation[k];
        if (!(v && v.length > 0)) {
          continue;
        }
        if (v === VALIDATION_KEY) {
          key = obj[k];
        }
        if (v === VALIDATION_KEY || v === VALIDATION_UNIQUE) {
          validationTemp[k] || (validationTemp[k] = []);
          if (_ref = obj[k], __indexOf.call(validationTemp[k], _ref) >= 0) {
            return console.error("dumplicate unique for filename: " + fileName + ",sheetName:" + sheetName + ",key:" + k + ",value:" + obj[k]);
          }
          validationTemp[k].push(obj[k]);
        }
      }
      for (k in meta_data) {
        v = meta_data[k];
        if (!(v && v.length > 0)) {
          continue;
        }
        if (v === TYPE_INT) {
          obj[k] = parseInt(obj[k], 10);
        }
        if (v.indexOf(TYPE_ONE_TO_MANY) > -1) {
          _ref1 = v.split(","), nouse = _ref1[0], fileName = _ref1[1], sheetName = _ref1[2], forginerKeyName = _ref1[3];
          obj[k] = readOneToMany(fileName, sheetName, forginerKeyName, key);
        }
      }
      newJson[key] = obj;
    }
    return newJson;
  };

  CACHE = {};

  readOneToMany = function(fileName, sheetName, forginerKeyName, forginerKeyValue) {
    var cacheKey, iret, jsonArray, k, obj;
    cacheKey = "" + fileName + ":" + sheetName;
    jsonArray = CACHE[cacheKey];
    if (!jsonArray) {
      jsonArray = convertJson(fileName, sheetName);
      CACHE[cacheKey] = jsonArray;
    }
    iret = [];
    for (k in jsonArray) {
      obj = jsonArray[k];
      if (obj && parseInt(obj[forginerKeyName]) === parseInt(forginerKeyValue)) {
        iret.push(obj);
      }
    }
    return iret;
  };

  make_dynamic_json = function(fileName, sheetName, outputJsonName) {
    var json;
    if (outputJsonName == null) {
      outputJsonName = sheetName + ".json";
    }
    json = convertJson(fileName, sheetName);
    if (!json) {
      return console.error("no json converted:fileName:" + fileName + ",sheetName:" + sheetName);
    }
    fs.writeFileSync(outputJsonName, JSON.stringify(json, null, 2));
    console.log("make_dynamic_json success:outputJson->:" + outputJsonName);
    return json;
  };

  module.exports = {
    make_dynamic_json: make_dynamic_json
  };

}).call(this);
